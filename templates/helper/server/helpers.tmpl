{{- /*
  Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
  this source code is governed by the MIT license that can be found in
  the LICENSE file.
*/ -}}
{{- define "helper/rest/server/helpers" }}
// JSON marshals 'v' to JSON, and setting the Content-Type as application/json.
// Note that this does NOT auto-escape HTML. If 'v' cannot be marshalled to JSON,
// this will panic.
//
// JSON also supports prettification when the origin request has a query parameter
// of "pretty" set to true.
func JSON(w http.ResponseWriter, r *http.Request, status int, v any) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(status)
    enc := json.NewEncoder(w)

    if pretty, _ := strconv.ParseBool(r.FormValue("pretty")); pretty {
        enc.SetIndent("", "    ")
    }

    if err := enc.Encode(v); err != nil && err != io.EOF {
        panic(fmt.Sprintf("failed to marshal response: %v", err))
    }
}

var (
    // DefaultDecoder is the default decoder used by Bind. You can either override
    // this, or provide your own. Make sure it is set before Bind is called.
    DefaultDecoder = form.NewDecoder()

    // DefaultDecodeMaxMemory is the maximum amount of memory in bytes that will be
    // used for decoding multipart/form-data requests.
    DefaultDecodeMaxMemory int64 = 8 << 20
)

// Bind decodes the request body to the given struct. At this time the only supported
// content-types are application/json, application/x-www-form-urlencoded, as well as
// GET parameters.
func Bind(r *http.Request, v any) error {
    err := r.ParseForm()
    if err != nil {
        return &ErrBadRequest{Err: fmt.Errorf("parsing form parameters: %w", err)}
    }

    switch r.Method {
    case http.MethodGet, http.MethodHead:
        err = DefaultDecoder.Decode(v, r.Form)
    case http.MethodPost, http.MethodPut, http.MethodPatch:
        switch {
        case strings.HasPrefix(r.Header.Get("Content-Type"), "application/json"):
            dec := json.NewDecoder(r.Body)
            defer r.Body.Close()
            err = dec.Decode(v)
        case strings.HasPrefix(r.Header.Get("Content-Type"), "multipart/form-data"):
            err = r.ParseMultipartForm(DefaultDecodeMaxMemory)
            if err == nil {
                err = DefaultDecoder.Decode(v, r.MultipartForm.Value)
            }
        default:
            err = DefaultDecoder.Decode(v, r.PostForm)
        }
    default:
        return &ErrBadRequest{Err: fmt.Errorf("unsupported method %s", r.Method)}
    }

    if err != nil {
        return &ErrBadRequest{Err: fmt.Errorf("error decoding %s request into required format (%T): %w", r.Method, v, err)}
    }
    return nil
}
{{- end }}{{/* end template */}}
