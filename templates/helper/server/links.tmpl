{{- /*
  Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
  this source code is governed by the MIT license that can be found in
  the LICENSE file.
*/ -}}
{{- define "helper/rest/server/links/config" }}
    {{ if not $.Annotations.RestConfig.DisableSpecHandler }}
        // EnableLinks if set to true, will enable the "Link" response header, which can be used to hint
        // to clients about the location of the OpenAPI spec, API documentation, how to auto-paginate
        // through results, and more.
        EnableLinks bool
    {{ end }}
{{ end }}{{/* end template */}}

{{- define "helper/rest/server/links/handler" -}}
    {{- if not $.Annotations.RestConfig.DisableSpecHandler }}
        if s.config.EnableLinks {
            links := Links{}

            {{- if not $.Annotations.RestConfig.DisableSpecHandler }}
                if !s.config.DisableSpecHandler {
                    links["service-desc"] = s.config.BasePath + "/openapi.json"
                    links["describedby"] = s.config.BasePath + "/openapi.json"
                }
            {{- end }}

            if err == nil && resp != nil && op == OperationList {
                if lr, ok := any(resp).(linkablePagedResource); ok {
                    query := r.URL.Query()
                    if page := lr.GetPage(); page > 1 {
                        query.Set("page", strconv.Itoa(page-1))
                        r.URL.RawQuery = query.Encode()
                        links["prev"] = r.URL.String()
                        if !strings.HasPrefix(links["prev"], s.config.BasePath) {
                            links["prev"] = s.config.BasePath + links["prev"]
                        }
                    }
                    if !lr.GetIsLastPage() {
                        query.Set("page", strconv.Itoa(lr.GetPage()+1))
                        r.URL.RawQuery = query.Encode()
                        links["next"] = r.URL.String()
                        if !strings.HasPrefix(links["next"], s.config.BasePath) {
                            links["next"] = s.config.BasePath + links["next"]
                        }
                    }
                }
            }

            if v := links.String(); v != "" {
                w.Header().Set("Link", v)
            }
        }
    {{ end }}
{{- end }}{{/* end template */}}

{{- define "helper/rest/server/links" -}}
    {{- if not $.Annotations.RestConfig.DisableSpecHandler }}
        // Links represents a set of linkable-relationsips that can be represented through
        // the "Link" header. Note that all urls must be url-encoded already.
        type Links map[string]string

        func (l Links) String() string {
            var links []string
            var keys []string
            for k := range l {
                keys = append(keys, k)
            }
            slices.Sort(keys)
            for _, k := range keys {
                links = append(links, fmt.Sprintf(`<%s>; rel=%q`, l[k], k))
            }
            return strings.Join(links, ", ")
        }

        type linkablePagedResource interface {
            GetPage() int
            GetIsLastPage() bool
        }
    {{- end }}
{{- end }}{{/* end template */}}
