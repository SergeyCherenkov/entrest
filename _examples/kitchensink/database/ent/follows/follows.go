// Code generated by ent, DO NOT EDIT.

package follows

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the follows type in the database.
	Label = "follows"
	// FieldFollowedAt holds the string denoting the followed_at field in the database.
	FieldFollowedAt = "followed_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPetID holds the string denoting the pet_id field in the database.
	FieldPetID = "pet_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePet holds the string denoting the pet edge name in mutations.
	EdgePet = "pet"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// PetFieldID holds the string denoting the ID field of the Pet.
	PetFieldID = "id"
	// Table holds the table name of the follows in the database.
	Table = "follows"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "follows"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PetTable is the table that holds the pet relation/edge.
	PetTable = "follows"
	// PetInverseTable is the table name for the Pet entity.
	// It exists in this package in order to avoid circular dependency with the "pet" package.
	PetInverseTable = "pets"
	// PetColumn is the table column denoting the pet relation/edge.
	PetColumn = "pet_id"
)

// Columns holds all SQL columns for follows fields.
var Columns = []string{
	FieldFollowedAt,
	FieldUserID,
	FieldPetID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFollowedAt holds the default value on creation for the "followed_at" field.
	DefaultFollowedAt func() time.Time
)

// OrderOption defines the ordering options for the Follows queries.
type OrderOption func(*sql.Selector)

// ByFollowedAt orders the results by the followed_at field.
func ByFollowedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPetID orders the results by the pet_id field.
func ByPetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPetID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPetField orders the results by pet field.
func ByPetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPetStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newPetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, PetColumn),
		sqlgraph.To(PetInverseTable, PetFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PetTable, PetColumn),
	)
}
