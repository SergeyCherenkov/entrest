{
    "openapi": "3.0.3",
    "info": {
        "title": "API",
        "version": "1.0.0"
    },
    "paths": {
        "/categories": {
            "summary": "Query all Category entities",
            "description": "Query all Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Query all Category entities",
                "description": "Query all Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create a new Category entity",
                "description": "Create a new Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/categories/{id}": {
            "summary": "Operate on a single Category entity",
            "description": "Operate on a single Category entity by its ID.",
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve a single Category entity",
                "description": "Retrieve a single Category entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getCategoryByID",
                "responses": {
                    "200": {
                        "description": "The requested Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete a single Category entity",
                "description": "Delete a single Category entity by its ID.",
                "operationId": "deleteCategoryByID",
                "responses": {
                    "204": {
                        "description": "The requested Category entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Category"
                ],
                "summary": "Update an existing Category entity",
                "description": "Update an existing Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateCategoryByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/CategoryID"
                }
            ]
        },
        "/categories/{id}/pets": {
            "summary": "List a categories associated pets",
            "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Category",
                    "Pet"
                ],
                "summary": "List a categories associated pets",
                "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategoryPet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/CategoryID"
                }
            ]
        },
        "/pets": {
            "summary": "Query all Pet entities",
            "description": "Query all Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet"
                ],
                "summary": "Query all Pet entities",
                "description": "Query all Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Pet.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Pet"
                ],
                "summary": "Create a new Pet entity",
                "description": "Create a new Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createPet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/pets/{id}": {
            "summary": "Operate on a single Pet entity",
            "description": "Operate on a single Pet entity by its ID.",
            "get": {
                "tags": [
                    "Pet"
                ],
                "summary": "Retrieve a single Pet entity",
                "description": "Retrieve a single Pet entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPetByID",
                "responses": {
                    "200": {
                        "description": "The requested Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pet"
                ],
                "summary": "Delete a single Pet entity",
                "description": "Delete a single Pet entity by its ID.",
                "operationId": "deletePetByID",
                "responses": {
                    "204": {
                        "description": "The requested Pet entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Pet"
                ],
                "summary": "Update an existing Pet entity",
                "description": "Update an existing Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updatePetByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                }
            ]
        },
        "/pets/{id}/categories": {
            "summary": "List a pets associated categories",
            "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "Category"
                ],
                "summary": "List a pets associated categories",
                "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetCategory",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                }
            ]
        },
        "/pets/{id}/friends": {
            "summary": "List a pets associated friends",
            "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "Pet"
                ],
                "summary": "List a pets associated friends",
                "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetFriend",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested friends.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                }
            ]
        },
        "/pets/{id}/owner": {
            "summary": "Get a pets associated owner",
            "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "User"
                ],
                "summary": "Get a pets associated owner",
                "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPetOwnerByID",
                "responses": {
                    "200": {
                        "description": "The requested owner entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                }
            ]
        },
        "/settings": {
            "summary": "Query all Setting entities",
            "description": "Query all Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "Query all Setting entities",
                "description": "Query all Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Setting.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingList"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/settings/{id}": {
            "summary": "Operate on a single Setting entity",
            "description": "Operate on a single Setting entity by its ID.",
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "Retrieve a single Setting entity",
                "description": "Retrieve a single Setting entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getSettingByID",
                "responses": {
                    "200": {
                        "description": "The requested Setting entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Setting"
                ],
                "summary": "Update an existing Setting entity",
                "description": "Update an existing Setting entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateSettingByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Setting entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SettingID"
                }
            ]
        },
        "/settings/{id}/admins": {
            "summary": "Administrators for the platform.",
            "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Setting",
                    "User"
                ],
                "summary": "Administrators for the platform.",
                "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettingAdmin",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "email",
                                "employee_id",
                                "created_at",
                                "updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDNotIn"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested admins.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SettingID"
                }
            ]
        },
        "/users": {
            "summary": "Query all User entities",
            "description": "Query all User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Query all User entities",
                "description": "Query all User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "email",
                                "employee_id",
                                "created_at",
                                "updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUUIDNotIn"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested User.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create a new User entity",
                "description": "Create a new User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/users/{id}": {
            "summary": "Operate on a single User entity",
            "description": "Operate on a single User entity by its ID.",
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Retrieve a single User entity",
                "description": "Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getUserByID",
                "responses": {
                    "200": {
                        "description": "The requested User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete a single User entity",
                "description": "Delete a single User entity by its ID.",
                "operationId": "deleteUserByID",
                "responses": {
                    "204": {
                        "description": "The requested User entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Update an existing User entity",
                "description": "Update an existing User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateUserByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        },
        "/users/{id}/pets": {
            "summary": "List a users associated pets",
            "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "User",
                    "Pet"
                ],
                "summary": "List a users associated pets",
                "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserPet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCompanyNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDepartmentNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmployeeIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUUIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "description": "A single Category entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Category entity.",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "readonly"
                ]
            },
            "CategoryCreate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CategoryList": {
                "description": "A paginated result set of Category entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "CategoryRead": {
                "$ref": "#/components/schemas/Category"
            },
            "CategoryUpdate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "PagedResponse": {
                "type": "object",
                "properties": {
                    "page": {
                        "description": "Page which the results are associated with.",
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "description": "The number of the last page of results.",
                        "type": "integer",
                        "example": 3
                    },
                    "is_last_page": {
                        "description": "If true, the current results are the last page of results.",
                        "type": "boolean",
                        "example": false
                    },
                    "total_count": {
                        "description": "Total number of results.",
                        "type": "integer",
                        "example": 100
                    }
                },
                "required": [
                    "page",
                    "last_page",
                    "is_last_page",
                    "total_count"
                ]
            },
            "Pet": {
                "description": "A single Pet entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Pet entity.",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "Kuro"
                    },
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    }
                },
                "required": [
                    "name"
                ]
            },
            "PetCreate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "integer"
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "PetEdges": {
                "type": "object",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "PetList": {
                "description": "A paginated result set of Pet entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "PetRead": {
                "description": "A single Pet entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/PetEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "PetUpdate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "integer"
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "Setting": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Setting entity.",
                        "type": "integer"
                    },
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "SettingEdges": {
                "type": "object",
                "properties": {
                    "admins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            },
            "SettingList": {
                "description": "A paginated result set of Setting entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "SettingRead": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Setting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/SettingEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "SettingUpdate": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "User": {
                "description": "A single User entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique ID as defined by the source system where the identity was synced from. Should only be used internally.",
                        "type": "string",
                        "example": "CN=Username (123456),OU=Accounts,DC=example,DC=com"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "USER"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "created_at": {
                        "description": "Time the identity was created in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last time the identity was updated in the source system.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "type",
                    "enabled",
                    "created_at",
                    "updated_at"
                ]
            },
            "UserCreate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique ID as defined by the source system where the identity was synced from. Should only be used internally.",
                        "type": "string",
                        "example": "CN=Username (123456),OU=Accounts,DC=example,DC=com"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "USER"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "created_at": {
                        "description": "Time the identity was created in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last time the identity was updated in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name",
                    "uuid"
                ]
            },
            "UserEdges": {
                "type": "object",
                "properties": {
                    "pets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                }
            },
            "UserList": {
                "description": "A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "UserRead": {
                "description": "A single User entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/UserEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "UserUpdate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "USER"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "parameters": {
            "CategoryID": {
                "name": "id",
                "in": "path",
                "description": "The ID of the Category to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeHasCategory": {
                "name": "has.category",
                "in": "query",
                "description": "If true, only return entities that have a category edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasOwner": {
                "name": "has.owner",
                "in": "query",
                "description": "If true, only return entities that have a owner edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasPet": {
                "name": "has.pet",
                "in": "query",
                "description": "If true, only return entities that have a pet edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerCompanyEQ": {
                "name": "owner.company.eq",
                "in": "query",
                "description": "Filters field \"company\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerCompanyEqualFold": {
                "name": "owner.company.eqFold",
                "in": "query",
                "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerCompanyIDEQ": {
                "name": "owner.companyID.eq",
                "in": "query",
                "description": "Filters field \"company_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerCompanyIDIn": {
                "name": "owner.companyID.in",
                "in": "query",
                "description": "Filters field \"company_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerCompanyIDIsNil": {
                "name": "owner.companyID.null",
                "in": "query",
                "description": "Filters field \"company_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerCompanyIDNEQ": {
                "name": "owner.companyID.neq",
                "in": "query",
                "description": "Filters field \"company_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerCompanyIDNotIn": {
                "name": "owner.companyID.notIn",
                "in": "query",
                "description": "Filters field \"company_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerCompanyIn": {
                "name": "owner.company.in",
                "in": "query",
                "description": "Filters field \"company\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerCompanyIsNil": {
                "name": "owner.company.null",
                "in": "query",
                "description": "Filters field \"company\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerCompanyNEQ": {
                "name": "owner.company.neq",
                "in": "query",
                "description": "Filters field \"company\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerCompanyNotIn": {
                "name": "owner.company.notIn",
                "in": "query",
                "description": "Filters field \"company\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerDepartmentEQ": {
                "name": "owner.department.eq",
                "in": "query",
                "description": "Filters field \"department\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDepartmentEqualFold": {
                "name": "owner.department.eqFold",
                "in": "query",
                "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDepartmentIDEQ": {
                "name": "owner.departmentID.eq",
                "in": "query",
                "description": "Filters field \"department_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerDepartmentIDIn": {
                "name": "owner.departmentID.in",
                "in": "query",
                "description": "Filters field \"department_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerDepartmentIDIsNil": {
                "name": "owner.departmentID.null",
                "in": "query",
                "description": "Filters field \"department_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerDepartmentIDNEQ": {
                "name": "owner.departmentID.neq",
                "in": "query",
                "description": "Filters field \"department_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerDepartmentIDNotIn": {
                "name": "owner.departmentID.notIn",
                "in": "query",
                "description": "Filters field \"department_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerDepartmentIn": {
                "name": "owner.department.in",
                "in": "query",
                "description": "Filters field \"department\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerDepartmentIsNil": {
                "name": "owner.department.null",
                "in": "query",
                "description": "Filters field \"department\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerDepartmentNEQ": {
                "name": "owner.department.neq",
                "in": "query",
                "description": "Filters field \"department\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDepartmentNotIn": {
                "name": "owner.department.notIn",
                "in": "query",
                "description": "Filters field \"department\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerDescriptionContains": {
                "name": "owner.description.contains",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDescriptionContainsFold": {
                "name": "owner.description.containsFold",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDescriptionIsNil": {
                "name": "owner.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerEmailContains": {
                "name": "owner.email.contains",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailContainsFold": {
                "name": "owner.email.containsFold",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailEQ": {
                "name": "owner.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailEqualFold": {
                "name": "owner.email.eqFold",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailHasPrefix": {
                "name": "owner.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailHasSuffix": {
                "name": "owner.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailIn": {
                "name": "owner.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerEmailIsNil": {
                "name": "owner.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerEmailNEQ": {
                "name": "owner.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailNotIn": {
                "name": "owner.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerEmployeeIDEQ": {
                "name": "owner.employeeID.eq",
                "in": "query",
                "description": "Filters field \"employee_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerEmployeeIDIn": {
                "name": "owner.employeeID.in",
                "in": "query",
                "description": "Filters field \"employee_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerEmployeeIDIsNil": {
                "name": "owner.employeeID.null",
                "in": "query",
                "description": "Filters field \"employee_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerEmployeeIDNEQ": {
                "name": "owner.employeeID.neq",
                "in": "query",
                "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeOwnerEmployeeIDNotIn": {
                "name": "owner.employeeID.notIn",
                "in": "query",
                "description": "Filters field \"employee_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeOwnerEnabledEQ": {
                "name": "owner.enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerNameContains": {
                "name": "owner.name.contains",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameContainsFold": {
                "name": "owner.name.containsFold",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameEQ": {
                "name": "owner.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameEqualFold": {
                "name": "owner.name.eqFold",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameHasPrefix": {
                "name": "owner.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameHasSuffix": {
                "name": "owner.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameIn": {
                "name": "owner.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerNameNEQ": {
                "name": "owner.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameNotIn": {
                "name": "owner.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerTitleContains": {
                "name": "owner.title.contains",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleContainsFold": {
                "name": "owner.title.containsFold",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleEQ": {
                "name": "owner.title.eq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleEqualFold": {
                "name": "owner.title.eqFold",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleHasPrefix": {
                "name": "owner.title.prefix",
                "in": "query",
                "description": "Filters field \"title\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleHasSuffix": {
                "name": "owner.title.suffix",
                "in": "query",
                "description": "Filters field \"title\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleIn": {
                "name": "owner.title.in",
                "in": "query",
                "description": "Filters field \"title\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerTitleIsNil": {
                "name": "owner.title.null",
                "in": "query",
                "description": "Filters field \"title\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerTitleNEQ": {
                "name": "owner.title.neq",
                "in": "query",
                "description": "Filters field \"title\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerTitleNotIn": {
                "name": "owner.title.notIn",
                "in": "query",
                "description": "Filters field \"title\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerTypeEQ": {
                "name": "owner.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "SYSTEM",
                        "USER",
                        "SECONDARY_ID",
                        "PROCESS_ID",
                        "GROUP"
                    ]
                }
            },
            "EdgeOwnerTypeIn": {
                "name": "owner.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ]
                    }
                }
            },
            "EdgeOwnerTypeNEQ": {
                "name": "owner.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "SYSTEM",
                        "USER",
                        "SECONDARY_ID",
                        "PROCESS_ID",
                        "GROUP"
                    ]
                }
            },
            "EdgeOwnerTypeNotIn": {
                "name": "owner.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ]
                    }
                }
            },
            "EdgeOwnerUUIDEQ": {
                "name": "owner.uuid.eq",
                "in": "query",
                "description": "Filters field \"uuid\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerUUIDEqualFold": {
                "name": "owner.uuid.eqFold",
                "in": "query",
                "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerUUIDIn": {
                "name": "owner.uuid.in",
                "in": "query",
                "description": "Filters field \"uuid\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerUUIDNEQ": {
                "name": "owner.uuid.neq",
                "in": "query",
                "description": "Filters field \"uuid\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerUUIDNotIn": {
                "name": "owner.uuid.notIn",
                "in": "query",
                "description": "Filters field \"uuid\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePetAgeEQ": {
                "name": "pet.age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetAgeGT": {
                "name": "pet.age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePetAgeIn": {
                "name": "pet.age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetAgeIsNil": {
                "name": "pet.age.null",
                "in": "query",
                "description": "Filters field \"age\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgePetAgeLT": {
                "name": "pet.age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePetAgeNEQ": {
                "name": "pet.age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetAgeNotIn": {
                "name": "pet.age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetNameContains": {
                "name": "pet.name.contains",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameContainsFold": {
                "name": "pet.name.containsFold",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameEQ": {
                "name": "pet.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameEqualFold": {
                "name": "pet.name.eqFold",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameHasPrefix": {
                "name": "pet.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameHasSuffix": {
                "name": "pet.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameIn": {
                "name": "pet.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePetNameNEQ": {
                "name": "pet.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameNotIn": {
                "name": "pet.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePetNicknamesIsNil": {
                "name": "pet.nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "FilterOperation": {
                "name": "filter_op",
                "in": "query",
                "description": "Filter operation to use.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "and",
                        "or"
                    ],
                    "default": "and"
                }
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "The page number to retrieve.",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "PetAgeEQ": {
                "name": "age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetAgeGT": {
                "name": "age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PetAgeIn": {
                "name": "age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetAgeIsNil": {
                "name": "age.null",
                "in": "query",
                "description": "Filters field \"age\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "PetAgeLT": {
                "name": "age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PetAgeNEQ": {
                "name": "age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetAgeNotIn": {
                "name": "age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetID": {
                "name": "id",
                "in": "path",
                "description": "The ID of the Pet to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "PetNameContains": {
                "name": "name.contains",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameContainsFold": {
                "name": "name.containsFold",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameEqualFold": {
                "name": "name.eqFold",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PetNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PetNicknamesIsNil": {
                "name": "nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "PrettyResponse": {
                "name": "pretty",
                "in": "query",
                "description": "If set to true, any JSON response will be indented. Not recommended for best performance.",
                "schema": {
                    "type": "boolean"
                }
            },
            "SettingID": {
                "name": "id",
                "in": "path",
                "description": "The ID of the Setting to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "SortOrder": {
                "name": "order",
                "in": "query",
                "description": "Order the results in ascending or descending order.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "default": "desc"
                }
            },
            "UserCompanyEQ": {
                "name": "company.eq",
                "in": "query",
                "description": "Filters field \"company\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserCompanyEqualFold": {
                "name": "company.eqFold",
                "in": "query",
                "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserCompanyIDEQ": {
                "name": "companyID.eq",
                "in": "query",
                "description": "Filters field \"company_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserCompanyIDIn": {
                "name": "companyID.in",
                "in": "query",
                "description": "Filters field \"company_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserCompanyIDIsNil": {
                "name": "companyID.null",
                "in": "query",
                "description": "Filters field \"company_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserCompanyIDNEQ": {
                "name": "companyID.neq",
                "in": "query",
                "description": "Filters field \"company_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserCompanyIDNotIn": {
                "name": "companyID.notIn",
                "in": "query",
                "description": "Filters field \"company_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserCompanyIn": {
                "name": "company.in",
                "in": "query",
                "description": "Filters field \"company\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserCompanyIsNil": {
                "name": "company.null",
                "in": "query",
                "description": "Filters field \"company\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserCompanyNEQ": {
                "name": "company.neq",
                "in": "query",
                "description": "Filters field \"company\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserCompanyNotIn": {
                "name": "company.notIn",
                "in": "query",
                "description": "Filters field \"company\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserDepartmentEQ": {
                "name": "department.eq",
                "in": "query",
                "description": "Filters field \"department\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDepartmentEqualFold": {
                "name": "department.eqFold",
                "in": "query",
                "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDepartmentIDEQ": {
                "name": "departmentID.eq",
                "in": "query",
                "description": "Filters field \"department_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserDepartmentIDIn": {
                "name": "departmentID.in",
                "in": "query",
                "description": "Filters field \"department_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserDepartmentIDIsNil": {
                "name": "departmentID.null",
                "in": "query",
                "description": "Filters field \"department_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserDepartmentIDNEQ": {
                "name": "departmentID.neq",
                "in": "query",
                "description": "Filters field \"department_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserDepartmentIDNotIn": {
                "name": "departmentID.notIn",
                "in": "query",
                "description": "Filters field \"department_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserDepartmentIn": {
                "name": "department.in",
                "in": "query",
                "description": "Filters field \"department\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserDepartmentIsNil": {
                "name": "department.null",
                "in": "query",
                "description": "Filters field \"department\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserDepartmentNEQ": {
                "name": "department.neq",
                "in": "query",
                "description": "Filters field \"department\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDepartmentNotIn": {
                "name": "department.notIn",
                "in": "query",
                "description": "Filters field \"department\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserDescriptionContains": {
                "name": "description.contains",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDescriptionContainsFold": {
                "name": "description.containsFold",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDescriptionIsNil": {
                "name": "description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmailContains": {
                "name": "email.contains",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailContainsFold": {
                "name": "email.containsFold",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEQ": {
                "name": "email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEqualFold": {
                "name": "email.eqFold",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasPrefix": {
                "name": "email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasSuffix": {
                "name": "email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailIn": {
                "name": "email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEmailIsNil": {
                "name": "email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmailNEQ": {
                "name": "email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailNotIn": {
                "name": "email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEmployeeIDEQ": {
                "name": "employeeID.eq",
                "in": "query",
                "description": "Filters field \"employee_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserEmployeeIDIn": {
                "name": "employeeID.in",
                "in": "query",
                "description": "Filters field \"employee_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserEmployeeIDIsNil": {
                "name": "employeeID.null",
                "in": "query",
                "description": "Filters field \"employee_id\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmployeeIDNEQ": {
                "name": "employeeID.neq",
                "in": "query",
                "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserEmployeeIDNotIn": {
                "name": "employeeID.notIn",
                "in": "query",
                "description": "Filters field \"employee_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserEnabledEQ": {
                "name": "enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserID": {
                "name": "id",
                "in": "path",
                "description": "The ID of the User to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "UserNameContains": {
                "name": "name.contains",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameContainsFold": {
                "name": "name.containsFold",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEqualFold": {
                "name": "name.eqFold",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserTitleContains": {
                "name": "title.contains",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleContainsFold": {
                "name": "title.containsFold",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleEQ": {
                "name": "title.eq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleEqualFold": {
                "name": "title.eqFold",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleHasPrefix": {
                "name": "title.prefix",
                "in": "query",
                "description": "Filters field \"title\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleHasSuffix": {
                "name": "title.suffix",
                "in": "query",
                "description": "Filters field \"title\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleIn": {
                "name": "title.in",
                "in": "query",
                "description": "Filters field \"title\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserTitleIsNil": {
                "name": "title.null",
                "in": "query",
                "description": "Filters field \"title\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserTitleNEQ": {
                "name": "title.neq",
                "in": "query",
                "description": "Filters field \"title\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserTitleNotIn": {
                "name": "title.notIn",
                "in": "query",
                "description": "Filters field \"title\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserTypeEQ": {
                "name": "type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "SYSTEM",
                        "USER",
                        "SECONDARY_ID",
                        "PROCESS_ID",
                        "GROUP"
                    ]
                }
            },
            "UserTypeIn": {
                "name": "type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ]
                    }
                }
            },
            "UserTypeNEQ": {
                "name": "type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "SYSTEM",
                        "USER",
                        "SECONDARY_ID",
                        "PROCESS_ID",
                        "GROUP"
                    ]
                }
            },
            "UserTypeNotIn": {
                "name": "type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ]
                    }
                }
            },
            "UserUUIDEQ": {
                "name": "uuid.eq",
                "in": "query",
                "description": "Filters field \"uuid\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserUUIDEqualFold": {
                "name": "uuid.eqFold",
                "in": "query",
                "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserUUIDIn": {
                "name": "uuid.in",
                "in": "query",
                "description": "Filters field \"uuid\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserUUIDNEQ": {
                "name": "uuid.neq",
                "in": "query",
                "description": "Filters field \"uuid\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserUUIDNotIn": {
                "name": "uuid.notIn",
                "in": "query",
                "description": "Filters field \"uuid\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Meta",
            "description": "Includes various endpoints for meta information about the service, like the OpenAPI spec, version, health, etc."
        },
        {
            "name": "Category"
        },
        {
            "name": "Pet"
        },
        {
            "name": "User"
        },
        {
            "name": "Setting",
            "description": "Settings contains the global settings for the platform. Generally only one should ever be returned."
        }
    ]
}
