{
    "openapi": "3.0.3",
    "info": {
        "title": "API",
        "version": "1.0.0"
    },
    "paths": {
        "/categories": {
            "summary": "Query all Category entities",
            "description": "Query all Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Query all Category entities",
                "description": "Query all Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create a new Category entity",
                "description": "Create a new Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/categories/{id}": {
            "summary": "Operate on a single Category entity",
            "description": "Operate on a single Category entity by its ID.",
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve a single Category entity",
                "description": "Retrieve a single Category entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getCategoryByID",
                "responses": {
                    "200": {
                        "description": "The requested Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete a single Category entity",
                "description": "Delete a single Category entity by its ID.",
                "operationId": "deleteCategoryByID",
                "responses": {
                    "204": {
                        "description": "The requested Category entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Category"
                ],
                "summary": "Update an existing Category entity",
                "description": "Update an existing Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateCategoryByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Category entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Category to act upon.",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    }
                }
            ]
        },
        "/categories/{id}/pets": {
            "summary": "List a categories associated pets",
            "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Category",
                    "Pet"
                ],
                "summary": "List a categories associated pets",
                "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategoryPet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.category",
                        "in": "query",
                        "description": "If true, only return entities that have an category edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.owner",
                        "in": "query",
                        "description": "If true, only return entities that have an owner edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "owner.company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/pets": {
            "summary": "Query all Pet entities",
            "description": "Query all Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet"
                ],
                "summary": "Query all Pet entities",
                "description": "Query all Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.category",
                        "in": "query",
                        "description": "If true, only return entities that have an category edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.owner",
                        "in": "query",
                        "description": "If true, only return entities that have an owner edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "owner.company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Pet.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Pet"
                ],
                "summary": "Create a new Pet entity",
                "description": "Create a new Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createPet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/pets/{id}": {
            "summary": "Operate on a single Pet entity",
            "description": "Operate on a single Pet entity by its ID.",
            "get": {
                "tags": [
                    "Pet"
                ],
                "summary": "Retrieve a single Pet entity",
                "description": "Retrieve a single Pet entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPetByID",
                "responses": {
                    "200": {
                        "description": "The requested Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pet"
                ],
                "summary": "Delete a single Pet entity",
                "description": "Delete a single Pet entity by its ID.",
                "operationId": "deletePetByID",
                "responses": {
                    "204": {
                        "description": "The requested Pet entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Pet"
                ],
                "summary": "Update an existing Pet entity",
                "description": "Update an existing Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updatePetByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Pet entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Pet to act upon.",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    }
                }
            ]
        },
        "/pets/{id}/categories": {
            "summary": "List a pets associated categories",
            "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "Category"
                ],
                "summary": "List a pets associated categories",
                "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetCategory",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/pets/{id}/friends": {
            "summary": "List a pets associated friends",
            "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "Pet"
                ],
                "summary": "List a pets associated friends",
                "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetFriend",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.category",
                        "in": "query",
                        "description": "If true, only return entities that have an category edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.owner",
                        "in": "query",
                        "description": "If true, only return entities that have an owner edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "owner.company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested friends.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/pets/{id}/owner": {
            "summary": "Get a pets associated owner",
            "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pet",
                    "User"
                ],
                "summary": "Get a pets associated owner",
                "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPetOwnerByID",
                "responses": {
                    "200": {
                        "description": "The requested owner entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Pet entity which this edge is attached to.",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    }
                }
            ]
        },
        "/settings": {
            "summary": "Query all Setting entities",
            "description": "Query all Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "Query all Setting entities",
                "description": "Query all Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Setting.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/settings/{id}": {
            "summary": "Operate on a single Setting entity",
            "description": "Operate on a single Setting entity by its ID.",
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "Retrieve a single Setting entity",
                "description": "Retrieve a single Setting entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getSettingByID",
                "responses": {
                    "200": {
                        "description": "The requested Setting entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Setting"
                ],
                "summary": "Update an existing Setting entity",
                "description": "Update an existing Setting entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateSettingByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Setting entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Setting to act upon.",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    }
                }
            ]
        },
        "/settings/{id}/admins": {
            "summary": "Administrators for the platform.",
            "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Setting",
                    "User"
                ],
                "summary": "Administrators for the platform.",
                "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettingAdmin",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "email",
                                "employee_id",
                                "created_at",
                                "updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.pet",
                        "in": "query",
                        "description": "If true, only return entities that have an pet edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pet.age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "pet.age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "pet.age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "pet.age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pet.age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "pet.age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pet.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pet.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pet.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested admins.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/users": {
            "summary": "Query all User entities",
            "description": "Query all User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Query all User entities",
                "description": "Query all User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "email",
                                "employee_id",
                                "created_at",
                                "updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.pet",
                        "in": "query",
                        "description": "If true, only return entities that have an pet edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pet.age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "pet.age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "pet.age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "pet.age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pet.age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "pet.age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pet.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pet.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pet.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pet.nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested User.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create a new User entity",
                "description": "Create a new User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/users/{id}": {
            "summary": "Operate on a single User entity",
            "description": "Operate on a single User entity by its ID.",
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Retrieve a single User entity",
                "description": "Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getUserByID",
                "responses": {
                    "200": {
                        "description": "The requested User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete a single User entity",
                "description": "Delete a single User entity by its ID.",
                "operationId": "deleteUserByID",
                "responses": {
                    "204": {
                        "description": "The requested User entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Update an existing User entity",
                "description": "Update an existing User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateUserByID",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the User to act upon.",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    }
                }
            ]
        },
        "/users/{id}/pets": {
            "summary": "List a users associated pets",
            "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "User",
                    "Pet"
                ],
                "summary": "List a users associated pets",
                "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserPet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "itemsPerPage",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "name",
                                "age",
                                "owner.id",
                                "owner.name",
                                "owner.email",
                                "owner.employee_id",
                                "owner.created_at",
                                "owner.updated_at"
                            ],
                            "default": "id"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SortOrder"
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "name": "age.eq",
                        "in": "query",
                        "description": "Filters field \"age\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.gt",
                        "in": "query",
                        "description": "Filters field \"age\" to be greater than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.in",
                        "in": "query",
                        "description": "Filters field \"age\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.lt",
                        "in": "query",
                        "description": "Filters field \"age\" to be less than the provided value.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "age.neq",
                        "in": "query",
                        "description": "Filters field \"age\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "age.notIn",
                        "in": "query",
                        "description": "Filters field \"age\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "age.null",
                        "in": "query",
                        "description": "Filters field \"age\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.category",
                        "in": "query",
                        "description": "If true, only return entities that have an category edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has.owner",
                        "in": "query",
                        "description": "If true, only return entities that have an owner edge.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nicknames.null",
                        "in": "query",
                        "description": "Filters field \"nicknames\" to be null/nil.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "name": "owner.company.eq",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.eqFold",
                        "in": "query",
                        "description": "Filters field \"company\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.in",
                        "in": "query",
                        "description": "Filters field \"company\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.neq",
                        "in": "query",
                        "description": "Filters field \"company\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.company.notIn",
                        "in": "query",
                        "description": "Filters field \"company\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.company.null",
                        "in": "query",
                        "description": "Filters field \"company\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.companyID.eq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.in",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.neq",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.companyID.notIn",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.companyID.null",
                        "in": "query",
                        "description": "Filters field \"company_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.department.eq",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.eqFold",
                        "in": "query",
                        "description": "Filters field \"department\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.in",
                        "in": "query",
                        "description": "Filters field \"department\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.neq",
                        "in": "query",
                        "description": "Filters field \"department\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.department.notIn",
                        "in": "query",
                        "description": "Filters field \"department\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.department.null",
                        "in": "query",
                        "description": "Filters field \"department\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.departmentID.eq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.in",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.neq",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.departmentID.notIn",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.departmentID.null",
                        "in": "query",
                        "description": "Filters field \"department_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.description.contains",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.containsFold",
                        "in": "query",
                        "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.description.null",
                        "in": "query",
                        "description": "Filters field \"description\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.contains",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.containsFold",
                        "in": "query",
                        "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eq",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.eqFold",
                        "in": "query",
                        "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.in",
                        "in": "query",
                        "description": "Filters field \"email\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.neq",
                        "in": "query",
                        "description": "Filters field \"email\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.notIn",
                        "in": "query",
                        "description": "Filters field \"email\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.email.null",
                        "in": "query",
                        "description": "Filters field \"email\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.email.prefix",
                        "in": "query",
                        "description": "Filters field \"email\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.email.suffix",
                        "in": "query",
                        "description": "Filters field \"email\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.employeeID.eq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.in",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.neq",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not equal to the provided value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner.employeeID.notIn",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "owner.employeeID.null",
                        "in": "query",
                        "description": "Filters field \"employee_id\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.enabled.eq",
                        "in": "query",
                        "description": "Filters field \"enabled\" to be equal to the provided value.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.name.contains",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.containsFold",
                        "in": "query",
                        "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eq",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.eqFold",
                        "in": "query",
                        "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.in",
                        "in": "query",
                        "description": "Filters field \"name\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.neq",
                        "in": "query",
                        "description": "Filters field \"name\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.notIn",
                        "in": "query",
                        "description": "Filters field \"name\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.name.prefix",
                        "in": "query",
                        "description": "Filters field \"name\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.name.suffix",
                        "in": "query",
                        "description": "Filters field \"name\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.contains",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.containsFold",
                        "in": "query",
                        "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eq",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.eqFold",
                        "in": "query",
                        "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.in",
                        "in": "query",
                        "description": "Filters field \"title\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.neq",
                        "in": "query",
                        "description": "Filters field \"title\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.notIn",
                        "in": "query",
                        "description": "Filters field \"title\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.title.null",
                        "in": "query",
                        "description": "Filters field \"title\" to be null/nil.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owner.title.prefix",
                        "in": "query",
                        "description": "Filters field \"title\" to start with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.title.suffix",
                        "in": "query",
                        "description": "Filters field \"title\" to end with the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.type.eq",
                        "in": "query",
                        "description": "Filters field \"type\" to be equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.in",
                        "in": "query",
                        "description": "Filters field \"type\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.type.neq",
                        "in": "query",
                        "description": "Filters field \"type\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SYSTEM",
                                "USER",
                                "SECONDARY_ID",
                                "PROCESS_ID",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "owner.type.notIn",
                        "in": "query",
                        "description": "Filters field \"type\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SYSTEM",
                                    "USER",
                                    "SECONDARY_ID",
                                    "PROCESS_ID",
                                    "GROUP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.eq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.eqFold",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be equal to the provided value, case-insensitive.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.in",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "owner.uuid.neq",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not equal to the provided value.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner.uuid.notIn",
                        "in": "query",
                        "description": "Filters field \"uuid\" to be not within the provided values.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "description": "A single Category entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Category entity.",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "readonly"
                ]
            },
            "CategoryCreate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CategoryList": {
                "description": "A paginated result set of Category entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "CategoryRead": {
                "$ref": "#/components/schemas/Category"
            },
            "CategoryUpdate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "PagedResponse": {
                "type": "object",
                "properties": {
                    "page": {
                        "description": "Page which the results are associated with.",
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "description": "The number of the last page of results.",
                        "type": "integer",
                        "example": 3
                    },
                    "is_last_page": {
                        "description": "If true, the current results are the last page of results.",
                        "type": "boolean",
                        "example": true
                    },
                    "total_count": {
                        "description": "Total number of results.",
                        "type": "integer",
                        "example": 100
                    }
                },
                "required": [
                    "page",
                    "last_page",
                    "is_last_page",
                    "total_count"
                ]
            },
            "Pet": {
                "description": "A single Pet entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Pet entity.",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "Kuro"
                    },
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    }
                },
                "required": [
                    "name"
                ]
            },
            "PetCreate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "integer"
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "PetEdges": {
                "type": "object",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "PetList": {
                "description": "A paginated result set of Pet entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "PetRead": {
                "description": "A single Pet entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/PetEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "PetUpdate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "integer"
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "Setting": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Setting entity.",
                        "type": "integer"
                    },
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "SettingEdges": {
                "type": "object",
                "properties": {
                    "admins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            },
            "SettingList": {
                "description": "A paginated result set of Setting entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "SettingRead": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Setting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/SettingEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "SettingUpdate": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "User": {
                "description": "A single User entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique ID as defined by the source system where the identity was synced from. Should only be used internally.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "CN=Username (123456),OU=Accounts,DC=example,DC=com"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "created_at": {
                        "description": "Time the identity was created in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last time the identity was updated in the source system.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "type",
                    "enabled",
                    "created_at",
                    "updated_at"
                ]
            },
            "UserCreate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique ID as defined by the source system where the identity was synced from. Should only be used internally.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "CN=Username (123456),OU=Accounts,DC=example,DC=com"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "created_at": {
                        "description": "Time the identity was created in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last time the identity was updated in the source system.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name",
                    "uuid"
                ]
            },
            "UserEdges": {
                "type": "object",
                "properties": {
                    "pets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                }
            },
            "UserList": {
                "description": "A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "UserRead": {
                "description": "A single User entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/UserEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "UserUpdate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the identity.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of object being defined (user, group, process ID, and system which is for internal usecases).",
                        "type": "string",
                        "enum": [
                            "SYSTEM",
                            "USER",
                            "SECONDARY_ID",
                            "PROCESS_ID",
                            "GROUP"
                        ],
                        "default": "USER",
                        "example": "CN=Username (123456),OU=Accounts,DC=example,DC=com"
                    },
                    "description": {
                        "description": "Full name if USER or PROCESS_ID, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Doe, John"
                    },
                    "enabled": {
                        "description": "If the identity is still in the source system (if false, it should not be granted access to any platform).",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the identity. Note that not all identities have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Doe@example.com"
                    },
                    "employee_id": {
                        "description": "Employee ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 123456
                    },
                    "avatar": {
                        "description": "Avatar data for the identity. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "title": {
                        "description": "Employee position title. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Sr Software Engineer"
                    },
                    "company": {
                        "description": "Company associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Some Company, LLC"
                    },
                    "company_id": {
                        "description": "Company ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 110
                    },
                    "department": {
                        "description": "Department associated with the identity. This is a best-effort field and may not always be available. This should generally only apply to the USER identity type.",
                        "type": "string",
                        "nullable": true,
                        "example": "Cloud Automation Engineering"
                    },
                    "department_id": {
                        "description": "Department ID associated with the identity. This should generally only apply to the USER identity type.",
                        "type": "integer",
                        "nullable": true,
                        "example": 44129
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "parameters": {
            "FilterOperation": {
                "name": "filter_op",
                "in": "query",
                "description": "Filter operation to use.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "and",
                        "or"
                    ],
                    "default": "and"
                }
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "The page number to retrieve.",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "PrettyResponse": {
                "name": "pretty",
                "in": "query",
                "description": "If set to true, any JSON response will be indented. Not recommended for best performance.",
                "schema": {
                    "type": "boolean"
                }
            },
            "SortOrder": {
                "name": "order",
                "in": "query",
                "description": "Order the results in ascending or descending order.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "default": "desc"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Category"
        },
        {
            "name": "Pet"
        },
        {
            "name": "User"
        },
        {
            "name": "Setting",
            "description": "Settings contains the global settings for the platform. Generally only one should ever be returned."
        }
    ]
}
